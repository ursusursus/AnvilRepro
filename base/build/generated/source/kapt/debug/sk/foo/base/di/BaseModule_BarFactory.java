// Generated by Dagger (https://dagger.dev).
package sk.foo.base.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import sk.foo.base.Bar;
import sk.foo.base.Foo;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BaseModule_BarFactory implements Factory<Bar> {
  private final Provider<Foo> fooProvider;

  public BaseModule_BarFactory(Provider<Foo> fooProvider) {
    this.fooProvider = fooProvider;
  }

  @Override
  public Bar get() {
    return bar(fooProvider.get());
  }

  public static BaseModule_BarFactory create(Provider<Foo> fooProvider) {
    return new BaseModule_BarFactory(fooProvider);
  }

  public static Bar bar(Foo foo) {
    return Preconditions.checkNotNull(BaseModule.bar(foo), "Cannot return null from a non-@Nullable @Provides method");
  }
}
