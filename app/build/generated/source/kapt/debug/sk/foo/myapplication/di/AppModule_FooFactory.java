// Generated by Dagger (https://dagger.dev).
package sk.foo.myapplication.di;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import sk.foo.base.Foo;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_FooFactory implements Factory<Foo> {
  private final Provider<Context> contextProvider;

  public AppModule_FooFactory(Provider<Context> contextProvider) {
    this.contextProvider = contextProvider;
  }

  @Override
  public Foo get() {
    return foo(contextProvider.get());
  }

  public static AppModule_FooFactory create(Provider<Context> contextProvider) {
    return new AppModule_FooFactory(contextProvider);
  }

  public static Foo foo(Context context) {
    return Preconditions.checkNotNull(AppModule.foo(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}
